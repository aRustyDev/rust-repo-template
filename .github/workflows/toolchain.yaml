name: "Toolchain Updates/Caching Workflow"

on:
  push:
    branches:
      - gha-*
  schedule:
    - cron: '0 0 * * SAT' # Every sunday at 00:00

jobs:
  # msrv:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Configure 1password
  #       uses: 1password/load-secrets-action/configure@v2
  #       with:
  #         service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
  #     - name: Load secrets
  #       id: opw
  #       uses: 1password/load-secrets-action@v2
  #       with:
  #         export-env: false
  #       env:
  #         WORKFLOW_SECRET: op://${{ secrets.OP_VAULT }}/gh-workflow/credential
  #     - name: Update var.msrv
  #       run: |
  #           cargo install cargo-msrv
  #           gh variable set MSRV --body "$(cargo msrv find --include-all-patch-releases --output-format minimal)"
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  rustup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
          # - ${{ vars.MSRV }}
        x64-targets:
          - x86_64-unknown-linux-gnu  # 64-bit Linux (kernel 3.2+, glibc 2.17+)
          - aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)
          # - x86_64-apple-darwin       # 64-bit macOS (10.12+, Sierra+)
          # - aarch64-apple-darwin      # ARM64 macOS (11.0+, Big Sur+)
          # - x86_64-pc-windows-gnu     # 64-bit MinGW (Windows 10+, Windows Server 2016+)
          # - x86_64-pc-windows-msvc    # 64-bit MSVC (Windows 10+, Windows Server 2016+, Pentium 4)
        x32-targets:
          - i686-unknown-linux-gnu    # 32-bit Linux (kernel 3.2+, glibc 2.17+, Pentium 4)
          # - i686-pc-windows-gnu       # 32-bit MinGW (Windows 10+, Windows Server 2016+)
          # - i686-pc-windows-msvc      # 32-bit MSVC (Windows 10+, Windows Server 2016+, Pentium 4)
    steps:
      # ----------- rust@stable -----------
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      # - name: Cache ${{ matrix.rust }} toolchain
      #   id: cache
      #   uses: actions/cache@v4.2.2
      #   with:
      #     path: |
      #       /home/runner/.rustup/toolchains/${{ matrix.rust }}-*
      #       /home/runner/.rustup/update-hashes/${{ matrix.rust }}-*
      #       /home/runner/.rustup/settings.toml
      #     key: rust-${{ matrix.rust }}-${{ matrix.x64-targets }}-toolchain-${{ hashFiles('~/.rustup/**') }}

      - name: Echo hashFiles
        run: |
          ls -la /home/runner/.rustup
          echo $GITHUB_WORKSPACE
          pwd
          ls -la $GITHUB_WORKSPACE
          echo "HashFiles() ${{ hashFiles('/home/runner/.rustup/settings.toml') }}"

      - name: Install RustUp with rustfmt and clippy
        id: toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.x64-targets }}
          components: rustfmt, clippy
          # cache-key: rust-${{ matrix.rust }}-${{ matrix.x64-targets }}-toolchain-${{ steps.toolchain.outputs.rustc_hash }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ matrix.rust }}-${{ matrix.x64-targets }}-toolchain-${{ steps.toolchain.outputs.cachekey }}
          shared-key: rust-${{ matrix.rust }}-${{ matrix.x64-targets }}-toolchain
          cache-all-crates: true
          # Only cache runs from master
          save-if: ${{ github.ref == 'refs/heads/master' }}
          # NOTE: only 'true' on build runs
          cache-targets: false

      - name: Echo hashFiles
        run: |
          ls -la /home/runner/.rustup
          pwd
          echo "HashFiles() ${{ hashFiles('/home/runner/.rustup/**') }}"
