name: "Release Workflow"

on:
  pull_request:
    types:
      - review_requested
    branches:
      - main

env:
  IMAGE_NAME: user/app
  DOCKERFILE: ./.config/Dockerfile

jobs:
  file_existence:
    runs-on: ubuntu-latest
    outputs:
      dockerfile: ${{ steps.dockerfile.outputs.files_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Dockerfile 
        id: dockerfile
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ env.DOCKERFILE }}"

  semver:
    runs-on: ubuntu-latest
    outputs:
      current: ${{ steps.version.outputs.version }} 
      previous: ${{ steps.version.outputs.previous-version }} 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      - name: Git Version
        id: version
        uses: codacy/git-version@2.7.1

  cargo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        name: install rust toolchain
        with:
          toolchain: nightly
          override: true

      - uses: actions-rs/cargo@v1
        name: run cargo fmt
        with:
          command: fmt

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

      - uses: actions-rs/grcov@v0.1

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.15.0'
          args: '-- --test-threads 1'

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml

      - uses: actions-rs/cargo@v1
        name: run cargo clippy
        with:
          command: clippy

      - uses: actions-rs/cargo@v1
        name: run cargo doc
        with:
          command: doc

      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run cargo bloat
        uses: orf/cargo-bloat-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    if: ${{needs.file_existence.outputs.dockerfile}} == 'true'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate build configuration
        uses: docker/build-push-action@v6
        with:
          call: check

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: ${{ env.TEST_TAG }}
          file: ${{ env.DOCKERFILE }} 

      - name: Test
        run: |
          docker run --rm ${{ env.TEST_TAG }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          provenance: mode=max
          file: ${{ env.DOCKERFILE }}
          sbom: true
          platforms: linux/amd64,linux/arm64
          push: true
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"
          tags: |
            user/app:latest
            user/app:1.0.0
            ghcr.io/user/app:latest
            ghcr.io/user/app:1.0.0

  release:
    runs-on: ubuntu-latest
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Release Drafter
        uses: release-drafter/release-drafter@v6.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: GH Release
        uses: softprops/action-gh-release@v2.2.1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            Release.txt
            LICENSE

